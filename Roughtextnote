    def bulk_delete(self, req_body, kwargs, request_args=None):
        try:
            if not 'schedules' in req_body:
                LOG.info("400-No schedules found to delete")
                res_body = dict(status='error',
                                message="No schedules found to delete")
                res_body = utils.unquote_json(res_body)
                return [HTTPCODES.BAD_REQUEST, utils.json_dumps(res_body)]
            username = kwargs.get('username')
            project_name = kwargs.get('project_name')
            if not kwargs.get('email') or not kwargs.get('is_project_admin'):
                status, user_detail = self.identity_api.get_element_details(
                    project_name, username, 'user', additional_elements=['role_types'])
                if status != HTTPCODES.SUCCESS:
                    raise Exception(user_detail['message'])
                kwargs['email'] = user_detail['email']
                kwargs['is_project_admin'] = True if RoleTypes.PROJECT_ADMIN_ROLE in user_detail[
                    'role_types'] else False
            status, data = CorestackIdentity().get_policy_users(project_name, 'schedules', 'delete')
            if status != HTTPCODES.SUCCESS:
                raise Exception(data['message'])
            is_access = [user['username'] for user in data if user['username'] == username]
            if not is_access:
                raise Exception('')
            if not kwargs.get('email') or not kwargs.get('is_project_admin'):
                status, user_detail = self.identity_api.get_element_details(
                    project_name, username, 'user', additional_elements=['role_types'])
                if status != HTTPCODES.SUCCESS:
                    raise Exception(user_detail['message'])
                kwargs['email'] = user_detail['email']
                kwargs['is_project_admin'] = True if RoleTypes.PROJECT_ADMIN_ROLE in user_detail[
                    'role_types'] else False
                user_email = kwargs.get('email')
            self.get_client()

            schedule_ids = [ObjectId(schedule) for schedule in req_body.get("schedules")]
            schedules = db.pyapi.find_documents('schedule_mgr',
                                                {"project_name": project_name,
                                                 "_id": {"$in": schedule_ids}})
            if schedules.count() < 0:
                status = HTTPCODES.NOT_FOUND
                res_body = dict(status="error", message="Schedule not found.")
                return [status, utils.json_dumps(res_body)]
            for schedule in schedules:
                print schedule
                # if schedule.get("is_system_schedule"):
                #     raise Exception('System schedules are not allowed to delete. '
                #                     'Will get deleted with cloud account deletion.')
                username = kwargs.get('username')

                try:
                    if username == schedule.get("created_by") or kwargs.get('is_project_admin'):
                        if schedule.get("metadata").get('schedule_id'):
                            try:
                                self.conn.delete_job(schedule.get('metadata').get('schedule_id'))
                            except HTTPError as e:
                                if 'Not Found' not in e.message:
                                    raise e
                        if schedule.get('metadata').get('last_schedule_id'):
                            try:
                                self.conn.delete_job(schedule.get('metadata').get('last_schedule_id'))
                            except HTTPError as e:
                                if 'Not Found' not in e.message:
                                    raise e
                        db.pyapi.update_documents('schedule_mgr', {"_id": schedule.get("_id")},
                                                  {"$set": {"metadata": {}}})
                        try:
                            self.conn.delete_job(str(schedule.get("_id")))
                        except HTTPError as e:
                            if 'Not Found' not in e.message:
                                raise e
                        sch_name = "%s-%s" % (str(schedule.get("_id")), short_id.generate_id())
                        db.pyapi.update_documents('schedule_mgr', {"_id": schedule.get("_id")},
                                                  {"$set": {"name": sch_name, "is_deleted": True}})
                        LOG.info('200-Schedule deleted in Scheduler')
                    else:
                        LOG.error("User %s is not allowed to delete the schedule %s"
                                  % (username, schedule.get('name')))
                        raise Exception("You are not authorized to delete the schedule '%s'"
                                        % schedule.get('name'))
                except AttributeError:
                    try:
                        jobs = self.conn.get_job_ids(project_name.replace('@', '_'))
                    except rundeck_exceptions.JobNotFound:
                        jobs = []

                    if str(schedule.get("_id")) in jobs:
                        LOG.error("400-Schedule can not be deleted Scheduler")
                        status = HTTPCODES.BAD_REQUEST
                        res_body = dict(status="error",
                                        message="Scheduled job can not be deleted")
                        return [status, utils.json_dumps(res_body)]
                    else:
                        if not kwargs.get('email_notify'):
                            status, project_detail = CorestackIdentity().get_element_details(project_name, username,
                                                                                             'project')
                            if status != HTTPCODES.SUCCESS:
                                raise Exception('Project %s not found' % project_name)
                            kwargs['email_notify'] = project_detail.get('email_notify')
                        if kwargs.get("email_notify", {}).get("jobs", {}).get("scheduled", True):
                            self.notify.schedule_notify("schedule_delete", [user_email],
                                                        username, schedule.get('name'))
                        LOG.info('200-Schedule deleted in Scheduler')
                        sch_name = "%s-%s" % (str(schedule.get("_id")), short_id.generate_id())
                        db.pyapi.update_documents('schedule_mgr', {"_id": schedule.get("_id")},
                                                  {"$set": {"name": sch_name, "is_deleted": True}})
                status = HTTPCODES.SUCCESS
                res_body = dict(status="success",
                                message="Scheduled job deleted")
                return [status, utils.json_dumps(res_body)]

        except Exception as e:
            LOG.error(e.message)
            raise Exception(e.message)
